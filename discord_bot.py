#!/usr/bin/env python3
"""
Bot Discord pour copier des serveurs
Ce bot permet de copier un serveur Discord vers un autre serveur en utilisant des commandes.
"""

import os
import discord
import asyncio
import logging
from discord.ext import commands
from discord_api import DiscordAPI
from typing import Dict, Optional, List

# Configuration des logs
logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Cr√©er un bot avec les intents n√©cessaires
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

# Dictionnaire pour stocker les tokens et les travaux en cours
user_tokens = {}
copy_tasks = {}

@bot.event
async def on_ready():
    """√âv√©nement d√©clench√© lorsque le bot est pr√™t."""
    logger.info(f'Bot connect√© en tant que {bot.user.name}')
    logger.info(f'ID du bot: {bot.user.id}')
    logger.info('------')
    
    # D√©finir le statut du bot
    await bot.change_presence(activity=discord.Activity(
        type=discord.ActivityType.watching, 
        name="!aide pour les commandes"
    ))

@bot.command(name='aide')
async def help_command(ctx):
    """Affiche l'aide des commandes disponibles."""
    embed = discord.Embed(
        title="Aide - Bot Copieur de Serveur Discord",
        description="Ce bot vous permet de copier un serveur Discord vers un autre serveur.",
        color=0x00AAFF
    )
    
    embed.add_field(
        name="!settoken <token>",
        value="D√©finir votre token Discord d'utilisateur (√† envoyer en DM uniquement pour la s√©curit√©)",
        inline=False
    )
    
    embed.add_field(
        name="!copy <id_source> <id_cible>",
        value="Copier un serveur source vers un serveur cible",
        inline=False
    )
    
    embed.add_field(
        name="!status",
        value="V√©rifier le statut du processus de copie en cours",
        inline=False
    )
    
    embed.add_field(
        name="!cleartoken",
        value="Supprimer votre token stock√© (√† envoyer en DM uniquement)",
        inline=False
    )
    
    embed.set_footer(text="‚ö†Ô∏è N'utilisez jamais la commande !settoken dans un canal public!")
    
    await ctx.send(embed=embed)

@bot.command(name='settoken')
async def set_token(ctx, token: str):
    """D√©finir le token Discord de l'utilisateur."""
    # V√©rifier si la commande est utilis√©e en DM pour la s√©curit√©
    if not isinstance(ctx.channel, discord.DMChannel):
        # Si la commande est utilis√©e dans un canal public, supprimer imm√©diatement le message
        try:
            await ctx.message.delete()
        except:
            pass
        
        # Avertir l'utilisateur
        warning = await ctx.send("‚ö†Ô∏è Pour des raisons de s√©curit√©, utilisez la commande `!settoken` uniquement en message priv√©!")
        await asyncio.sleep(5)
        await warning.delete()
        return
    
    # Stocker le token
    user_tokens[ctx.author.id] = token
    await ctx.send("‚úÖ Votre token a √©t√© configur√© avec succ√®s. Vous pouvez maintenant utiliser `!copy` pour copier un serveur.")

@bot.command(name='cleartoken')
async def clear_token(ctx):
    """Supprimer le token Discord stock√© pour l'utilisateur."""
    # V√©rifier si la commande est utilis√©e en DM pour la s√©curit√©
    if not isinstance(ctx.channel, discord.DMChannel):
        # Si la commande est utilis√©e dans un canal public, supprimer le message
        try:
            await ctx.message.delete()
        except:
            pass
        
        # Avertir l'utilisateur
        warning = await ctx.send("‚ö†Ô∏è Pour des raisons de s√©curit√©, utilisez la commande `!cleartoken` uniquement en message priv√©!")
        await asyncio.sleep(5)
        await warning.delete()
        return
    
    # Supprimer le token s'il existe
    if ctx.author.id in user_tokens:
        del user_tokens[ctx.author.id]
        await ctx.send("‚úÖ Votre token a √©t√© supprim√© avec succ√®s.")
    else:
        await ctx.send("‚ùå Aucun token n'√©tait stock√© pour vous.")

@bot.command(name='copy')
async def copy_server(ctx, source_id: str, target_id: str):
    """Copier un serveur Discord vers un autre serveur."""
    # V√©rifier si l'utilisateur a d√©fini un token
    if ctx.author.id not in user_tokens:
        await ctx.send("‚ùå Vous devez d'abord d√©finir votre token avec la commande `!settoken <token>` en message priv√©.")
        return
    
    # V√©rifier si l'utilisateur a d√©j√† une t√¢che de copie en cours
    if ctx.author.id in copy_tasks and not copy_tasks[ctx.author.id].done():
        await ctx.send("‚ö†Ô∏è Vous avez d√©j√† une copie de serveur en cours. Utilisez `!status` pour v√©rifier son √©tat.")
        return
    
    # V√©rifier que les serveurs source et cible sont diff√©rents
    if source_id == target_id:
        await ctx.send("‚ùå Les IDs des serveurs source et cible doivent √™tre diff√©rents.")
        return
    
    # Envoyer un message de confirmation
    message = await ctx.send("üîÑ D√©marrage de la copie du serveur... Cela peut prendre plusieurs minutes.")
    
    # Cr√©er une t√¢che asyncio pour effectuer la copie en arri√®re-plan
    task = asyncio.create_task(perform_copy(ctx, user_tokens[ctx.author.id], source_id, target_id, message))
    copy_tasks[ctx.author.id] = task
    
    # Attacher une fonction de callback √† la t√¢che pour g√©rer les erreurs
    task.add_done_callback(lambda t: handle_copy_completion(t, ctx))

@bot.command(name='status')
async def check_status(ctx):
    """V√©rifier le statut de la t√¢che de copie en cours."""
    if ctx.author.id not in copy_tasks:
        await ctx.send("‚ùå Vous n'avez aucune t√¢che de copie en cours ou r√©cente.")
        return
    
    task = copy_tasks[ctx.author.id]
    
    if task.done():
        if task.exception():
            await ctx.send("‚ùå Votre derni√®re t√¢che de copie a √©chou√© avec l'erreur suivante :\n```\n" + 
                           str(task.exception()) + "\n```")
        else:
            result = task.result()
            if result.get('success'):
                await ctx.send("‚úÖ Votre derni√®re t√¢che de copie s'est termin√©e avec succ√®s.")
            else:
                await ctx.send("‚ùå Votre derni√®re t√¢che de copie a √©chou√© :\n" + result.get('message', 'Erreur inconnue'))
    else:
        await ctx.send("üîÑ Une copie de serveur est en cours. Cela peut prendre plusieurs minutes.")

async def perform_copy(ctx, token, source_id, target_id, message) -> Dict:
    """
    Effectue la copie du serveur en arri√®re-plan.
    
    Args:
        ctx: Le contexte de la commande Discord
        token: Le token Discord de l'utilisateur
        source_id: L'ID du serveur source
        target_id: L'ID du serveur cible
        message: Le message √† mettre √† jour pendant le processus
        
    Returns:
        Un dictionnaire contenant le r√©sultat de l'op√©ration
    """
    # Initialiser l'API Discord
    discord_api = DiscordAPI(token)
    
    try:
        # √âtape 1: V√©rifier les serveurs source et cible
        await message.edit(content="üîÑ V√©rification des serveurs...")
        
        source_server = await discord_api.get_server(source_id)
        if not source_server:
            return {'success': False, 'message': f"‚ùå Impossible d'acc√©der au serveur source (ID: {source_id}). V√©rifiez l'ID et vos permissions."}
        
        target_server = await discord_api.get_server(target_id)
        if not target_server:
            return {'success': False, 'message': f"‚ùå Impossible d'acc√©der au serveur cible (ID: {target_id}). V√©rifiez l'ID et vos permissions."}
        
        # √âtape 2: Extraire les donn√©es du serveur source
        source_name = source_server.get('name', 'Unknown')
        target_name = target_server.get('name', 'Unknown')
        
        await message.edit(content=f"üîÑ Extraction des donn√©es du serveur source: {source_name}...")
        
        # R√©cup√©rer les canaux
        await message.edit(content=f"üîÑ R√©cup√©ration des canaux de {source_name}...")
        channels = await discord_api.get_channels(source_id)
        await asyncio.sleep(1)
        
        # R√©cup√©rer les r√¥les
        await message.edit(content=f"üîÑ R√©cup√©ration des r√¥les de {source_name}...")
        roles = await discord_api.get_roles(source_id)
        await asyncio.sleep(1)
        
        # R√©cup√©rer les emojis
        await message.edit(content=f"üîÑ R√©cup√©ration des emojis de {source_name}...")
        emojis = await discord_api.get_emojis(source_id)
        await asyncio.sleep(1)
        
        # R√©cup√©rer les stickers
        await message.edit(content=f"üîÑ R√©cup√©ration des stickers de {source_name}...")
        stickers = await discord_api.get_stickers(source_id)
        await asyncio.sleep(1)
        
        # √âtape 3: Nettoyer le serveur cible
        await message.edit(content=f"‚ö†Ô∏è Nettoyage du serveur cible: {target_name}...")
        
        try:
            await discord_api.clear_server(target_id)
            await asyncio.sleep(2)
        except Exception as e:
            logger.error(f"Erreur lors du nettoyage du serveur: {str(e)}")
            return {'success': False, 'message': f"‚ùå Erreur lors du nettoyage du serveur cible: {str(e)}"}
        
        # √âtape 4: Restaurer la structure sur le serveur cible
        # Cr√©er les r√¥les
        await message.edit(content=f"üîÑ Cr√©ation des r√¥les sur {target_name}...")
        try:
            role_id_map = await discord_api.restore_roles(target_id, roles)
            await asyncio.sleep(2)
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation des r√¥les: {str(e)}")
            return {'success': False, 'message': f"‚ùå Erreur lors de la cr√©ation des r√¥les: {str(e)}"}
        
        # Cr√©er les canaux
        await message.edit(content=f"üîÑ Cr√©ation des canaux sur {target_name}...")
        try:
            await discord_api.restore_channels(target_id, channels, role_id_map)
            await asyncio.sleep(2)
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation des canaux: {str(e)}")
            return {'success': False, 'message': f"‚ùå Erreur lors de la cr√©ation des canaux: {str(e)}"}
        
        # Cr√©er les emojis
        await message.edit(content=f"üîÑ Cr√©ation des emojis sur {target_name}...")
        try:
            await discord_api.restore_emojis(target_id, emojis)
            await asyncio.sleep(2)
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation des emojis: {str(e)}")
            # On continue m√™me si les emojis √©chouent
        
        # Cr√©er les stickers
        await message.edit(content=f"üîÑ Cr√©ation des stickers sur {target_name}...")
        try:
            await discord_api.restore_stickers(target_id, stickers)
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation des stickers: {str(e)}")
            # On continue m√™me si les stickers √©chouent
        
        # Succ√®s!
        success_message = f"‚úÖ Serveur copi√© avec succ√®s!\n**Source:** {source_name} (ID: {source_id})\n**Cible:** {target_name} (ID: {target_id})"
        await message.edit(content=success_message)
        
        return {'success': True, 'message': success_message}
        
    except Exception as e:
        error_message = f"‚ùå Erreur pendant la copie du serveur: {str(e)}"
        logger.error(error_message)
        await message.edit(content=error_message)
        return {'success': False, 'message': error_message}
    
    finally:
        # S'assurer que la session est ferm√©e
        try:
            await discord_api.close()
        except:
            pass

def handle_copy_completion(task, ctx):
    """G√®re la fin d'une t√¢che de copie (r√©ussie ou non)."""
    try:
        # R√©cup√©rer le r√©sultat si la t√¢che est termin√©e sans erreur
        if not task.exception():
            result = task.result()
            logger.info(f"T√¢che de copie termin√©e pour {ctx.author.name} avec statut: {result.get('success')}")
    except Exception as e:
        logger.error(f"Erreur dans le gestionnaire de fin de t√¢che: {str(e)}")

if __name__ == "__main__":
    # R√©cup√©rer le token du bot depuis les variables d'environnement
    bot_token = os.environ.get("DISCORD_BOT_TOKEN")
    
    if not bot_token:
        logger.error("Aucun token de bot Discord trouv√©. D√©finissez la variable d'environnement DISCORD_BOT_TOKEN.")
        sys.exit(1)
    
    # Lancer le bot
    bot.run(bot_token)